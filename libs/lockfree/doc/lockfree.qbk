
[library Boost.Lockfree
    [quickbook 1.4]
    [authors [Blechmann, Tim]]
    [copyright 2008 Tim Blechmann]
    [category algorithms]
    [purpose 
        lockfree concurrent data structures
    ]
    [id lockfree]
    [dirname lockfree]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[c++] 


[/  Images   ]

[def _note_                         [$images/note.png]]
[def _alert_                        [$images/caution.png]]
[def _detail_                       [$images/note.png]]
[def _tip_                          [$images/tip.png]]

[/  Links   ]

[def _lockfree_                      [^boost.lockfree]] 

[/  unspecified stuff   ]
[def __unspecified_int__ /unspecified-int-type/]
[def __unspecified_bool__ /unspecified-bool-type/]

[section:disclaimer Disclaimer]
_lockfree_ is NOT a boost library!
[endsect]

[section Introduction]

[h2 What is _lockfree_?]

_lockfree_ provides implementations of lock-free data structures. Lock-free data structures can be accessed by multiple
threads without the necessity of blocking synchronization primitives such as guards.  Lock-free data structures can be
used in real-time systems, where blocking algorithms may lead to high worst-case execution times, to avoid priority
inversion, or to increase the scalability for multi-processor machines.

[endsect]

[section Reference]

[section boost.lockfree fifo]

[classref boost::lockfree::fifo boost::lockfree::fifo] provides a multi-writer/multi-reader lockfree fifo class,
enqueueing and dequeueing is lockfree, construction/destruction has to be synchronized. A specialized [classref
boost::lockfree::fifo fifo] class for pointer-arguments is provided, which supports dequeueing to stl/boost-style smart
pointers.

It uses a caching freelist for memory management, freed nodes are pushed to the freelist. This may result in leaking
memory. 

[section Synopsis]

[c++]


``
namespace boost {
namespace lockfree {

template <typename T, typename Alloc = std::allocator<T> >
class fifo:
    boost::noncopyable
{
public:
    fifo(void);
    explicit fifo(std::size_t initial_nodes);
    ~fifo(void);

    bool empty(void) const;

    void enqueue(T const & t);
    bool dequeue (T * ret);
};

template <typename T, typename Alloc = std::allocator<T> >
class fifo<T*>:
    boost::noncopyable
{
public:
    fifo(void);
    explicit fifo(std::size_t initial_nodes);
    ~fifo(void);

    bool empty(void) const;

    void enqueue(T * t);

    bool dequeue (T ** ret);
    bool dequeue (std::auto_ptr<T> & ret);
    bool dequeue (boost::scoped_ptr<T> & ret);
    bool dequeue (boost::shared_ptr<T> & ret);
};

} /* namespace lockfree */
} /* namespace boost */
``

[endsect]

[section Members]

[heading Constructors]

    fifo(void);

Default Constructor

    explicit fifo(std::size_t initial_nodes);

Construct fifo with a number of initially allocated fifo nodes.


[heading Destructor]

    ~fifo(void);

Destroys fifo, free all nodes from freelist.


[heading Empty]

    bool empty(void) const;

Returns: true, if fifo is empty.

[warning Not thread-safe, use for debugging purposes only]


[heading Enqueue]

    void enqueue(T const & t);

Enqueues object t to the fifo.

[note Thread-safe and non-blocking]
[important May block if node needs to be allocated from the operating system]

[heading Dequeue]

    bool dequeue (T * ret);

Dequeue object from fifo.

Returns: true, if the dequeue operation is successful, false if fifo was empty.
Effect: if dequeue operation is successful, object is written to memory location denoted by ret.

[note Thread-safe and non-blocking]

    bool dequeue (std::auto_ptr<T> & ret);
    bool dequeue (boost::scoped_ptr<T> & ret);
    bool dequeue (boost::shared_ptr<T> & ret);

The specialized class for pointer objects provides an api for dequeuing objects directly to smart pointers.

[endsect]



[endsect]

[section boost.lockfree stack]

[classref boost::lockfree::stack boost::lockfree::stack] provides a multi-writer/multi-reader lockfree stack class,
push and pop is lockfree, construction/destruction has to be synchronized.

It uses a caching freelist for memory management, freed nodes are pushed to the freelist. This may result in leaking
memory.

[section Synopsis]

[c++]


``
namespace boost {
namespace lockfree {

template <typename T, typename Alloc = std::allocator<T> >
class stack:
    boost::noncopyable
{
public:
    stack(void);
    explicit stack(std::size_t n);

    void push(T const & v);

    bool pop(T * ret);
};

} /* namespace lockfree */
} /* namespace boost */
``

[endsect]

[section Members]

[heading Constructors]

    stack(void);

Default Constructor

    explicit stack(std::size_t initial_nodes);

Construct stack with a number of initially allocated stack nodes.


[heading Destructor]

    ~stack(void);

Destroys stack, free all nodes from freelist.

[heading Push]

    void push(T const & t);

Pushes object t to the stack.

[note Thread-safe and non-blocking]
[important May block, if node needs to be allocated from the operating system]

[heading Pop]

    bool pop (T * ret);

Pop object from stack.

Returns: true, if the pop operation is successful, false if stack was empty.
Effect: if pop operation is successful, object is written to memory location denoted by ret.

[note Thread-safe and non-blocking]

[endsect]
[endsect]


[endsect]

[section Building blocks]
The Boost.Lockfree library provides several building blocks, used in lockfree algorithms.


[section tagged_ptr]

Tagged pointer implementation as smart pointer class, as it is required by several lockfree algorithms.

[section Synposis]
``
namespace boost
{
namespace lockfree
{

template <class T>
class tagged_ptr
{
public:
    typedef __unspecified_int__ tag_t;

    tagged_ptr(void);
    tagged_ptr(tagged_ptr const & p);
    explicit tagged_ptr(T * p, tag_t t = 0);

    void operator= (tagged_ptr const & p);
    void atomic_set(tagged_ptr const & p);
    void atomic_set(T * p, tag_t t);

    void set(tagged_ptr const & p);
    void set(T * p, tag_t t);

    bool operator== (tagged_ptr const & p) const;
    bool operator!= (tagged_ptr const & p) const;

    T * get_ptr() const;
    void set_ptr(T * p);

    tag_t get_tag() const;
    void set_tag(tag_t t);

    bool CAS(tagged_ptr const & oldval, T * newptr);
    bool CAS(tagged_ptr const & oldval, T * newptr, tag_t t);

    T & operator*() const;
    T * operator->() const;

    operator __unspecified_bool__(void) const;
};

} /* namespace lockfree */
} /* namespace boost */

``
[endsect]

[section Members]

[heading tag_t]

    typedef __unspecified_int__ tag_t;

Type of ABA-prevention tag

[heading Constructors]

    tagged_ptr(void);

Uninitialized constructor

    tagged_ptr(tagged_ptr const & p);

Copy Constructor

    explicit tagged_ptr(T * p, tag_t t = 0);

Construct tagged_ptr from pointer and tag


[heading Atomically Set] 

    void operator= (tagged_ptr const & p);
    void atomic_set(tagged_ptr const & p);

Atomically set from tagged_ptr.

    void atomic_set(T * p, tag_t t);

Atomically set from pointer and tag

[heading Set]
    void set(tagged_ptr const & p);

Set from tagged_ptr

    void set(T * p, tag_t t);

Set from pointer and tag

[heading Comparison]
    bool operator== (tagged_ptr const & p) const;
    bool operator!= (tagged_ptr const & p) const;

Returns: (get_ptr() == p.get_ptr()) && (get_tag() == p.get_tag())

[heading Pointer access]

    T * get_ptr() const;

Get pointer

    void set_ptr(T * p);

Set pointer


[heading Tag access]

    tag_t get_tag() const;

Get tag

    void set_tag(tag_t t);

Set tag

[heading Compare-And-Swap]

    bool CAS(tagged_ptr const & oldval, T * newptr);

if (*this == oldval) {
    this->set(newptr, oldval.get_tag() + 1);
    return true;
else
    return false;

    bool CAS(tagged_ptr const & oldval, T * newptr, tag_t t);

if (*this == oldval) {
    this->set(newptr, t);
    return true;
else
    return false;

[heading Indirection]
    T & operator*() const;

Returns: reference to object, undefined if get_ptr() == 0

    T * operator->() const;

Returns: pointer to object

[heading Conversion]

    operator __unspecified_bool__(void) const;

Returns: get_ptr() != 0


[endsect]

[endsect]

[section Freelist]

Wrapper class with freelist api to operators new and delete.

    template <typename T, typename Alloc = std::allocator<T> >
    class caching_freelist
    {   
    public:
        caching_freelist(void);
        explicit caching_freelist(std::size_t initial_nodes)
        ~caching_freelist(void);

        T * allocate (void);
        void deallocate (T * n);
    };

Caching freelist class. Uses an internal lockfree stack to cache objects. Deallocation never frees objects.

    template <typename T, std::size_t max_size = 64, 
              typename Alloc = std::allocator<T> >
    class freelist
    {
    public:
        freelist(void);
        explicit freelist(std::size_t initial_nodes);
        ~freelist(void);

        T * allocate (void);
        void deallocate (T * n);
    };

Freelist class, with a maximum size of max_size.

[endsect]
[endsect]


[section Primitives]
The Boost.Lockfree library provides platform-specific wrappers for low-level operations.

[section Memory Barriers]
Full Memory Barrier.

    void boost::lockfree::detail::memory_barrier(void);


[endsect]

[section Compare-and-Swap]
Atomic compare-and-swap. Lockfree on supported platforms, otherwise blocking emulation. Versions for single-word and
double-word machines. 

    template <class C, class D>
    inline bool boost::lockfree::detail::CAS(volatile C * addr, D old, D nw);

    template <class C, class D, class E>
    inline bool boost::lockfree::detail::CAS2(volatile C * addr, D old1, E old2, D new1, E new2);


[endsect]

[section atomic_int]
    template <typename T>
    class boost::lockfree::atomic_int
    {
    public:
        explicit atomic_int(T v = 0);

        operator T(void) const;
        void operator =(T v);

        T operator +=(T v);
        T operator -=(T v);

        /* prefix operators */
        T operator ++(void);
        T operator --(void);

        /* postfix operators */
        T operator ++(int);
        T operator --(int);
    };

Atomic Integer Class.

[endsect]

[endsect]

[section Portability]

Tested architectures:

# x86
# x86_64

Tested compilers:

# gcc-4.2, gcc-4.3

Tested operating systems:

# linux

[endsect]

[section Acknowledgements]

Thanks for suggestions, porting, testing:

# Thomas Grill, original win32/osx code pieces
# Shiwei Xu, api suggestions

[endsect]
